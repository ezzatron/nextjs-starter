name: Continuous integration

on:
  push:
  pull_request:
  schedule:
    - cron: 0 14 * * 0 # Every Sunday, at midnight AEST

env:
  FORCE_COLOR: "true"

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest

    outputs:
      artifact-suffix: ${{ steps.artifact-suffix.outputs.suffix }}

    steps:
      - name: Build artifact suffix
        id: artifact-suffix
        run: echo "suffix=${GITHUB_REPOSITORY//\//-}-${GITHUB_RUN_ID}-${GITHUB_RUN_ATTEMPT}" >> "$GITHUB_OUTPUT"

      - name: Checkout
        uses: actions/checkout@v5

      - name: Set up pnpm
        uses: pnpm/action-setup@v4

      - name: Set up Node.js
        uses: actions/setup-node@v6
        with:
          cache: pnpm
          node-version-file: .node-version

      - name: Cache Next.js build
        uses: actions/cache@v4
        with:
          path: out/next/dist/cache
          key: ${{ runner.os }}-nextjs-${{ hashFiles('pnpm-lock.yaml') }}-${{ hashFiles('next.config.*', 'tsconfig.json', 'public/**', 'src/**') }}
          restore-keys: ${{ runner.os }}-nextjs-${{ hashFiles('pnpm-lock.yaml') }}-

      - name: Set up Task
        uses: go-task/setup-task@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Install dependencies
        run: task install-deps

      - name: Check generated files
        run: task ci:regenerate

      - name: Build
        run: task ci:build

      - name: Extract image metadata
        id: image-meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_NAME }}

      - name: Build image
        uses: docker/build-push-action@v6
        env:
          DOCKER_BUILD_RECORD_RETENTION_DAYS: "7"
        with:
          cache-from: type=gha
          cache-to: type=gha,mode=max
          context: .
          platforms: linux/amd64,linux/arm64
          tags: ${{ steps.image-meta.outputs.tags }}
          labels: ${{ steps.image-meta.outputs.labels }}

      # This is necessary to preserve executable permissions
      - name: Archive build artifacts
        if: "!cancelled()"
        run: |
          git ls-files --others --ignored --exclude-standard > out/build-manifest
          tar -cf out/build-artifacts.tar --files-from=out/build-manifest
      - name: Upload build artifacts
        if: "!cancelled()"
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ steps.artifact-suffix.outputs.suffix }}
          retention-days: "7"
          overwrite: "true"
          if-no-files-found: error
          path: out/build-artifacts.tar

      - name: Upload package manager files
        if: "!cancelled()"
        uses: actions/upload-artifact@v4
        with:
          name: package-manager-files-${{ steps.artifact-suffix.outputs.suffix }}
          retention-days: "7"
          overwrite: "true"
          if-no-files-found: ignore
          path: |
            package.json
            pnpm-lock.yaml

  vitest:
    name: Vitest
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0 # For SonarQube analysis

      - name: Set up pnpm
        uses: pnpm/action-setup@v4

      - name: Set up Node.js
        uses: actions/setup-node@v6
        with:
          cache: pnpm
          node-version-file: .node-version

      - name: Set up Task
        uses: go-task/setup-task@v1

      - name: Download build artifacts
        uses: actions/download-artifact@v5
        with:
          name: build-${{ needs.build.outputs.artifact-suffix }}
          path: out
      - name: Extract build artifacts
        run: tar -xf out/build-artifacts.tar

      - name: Start test services
        run: task test:services:up

      - name: Vitest
        run: task ci:vitest

      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v6
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      - name: Stop test services
        if: always()
        run: task test:services:down

      - name: Upload Vitest screenshots
        if: "!cancelled()"
        uses: actions/upload-artifact@v4
        with:
          name: vitest-screenshots-${{ needs.build.outputs.artifact-suffix }}
          retention-days: "7"
          overwrite: "true"
          if-no-files-found: ignore
          path: out/vitest/browser/screenshots

  playwright:
    name: Playwright
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Set up pnpm
        uses: pnpm/action-setup@v4

      - name: Set up Node.js
        uses: actions/setup-node@v6
        with:
          cache: pnpm
          node-version-file: .node-version

      - name: Set up Task
        uses: go-task/setup-task@v1

      - name: Download build artifacts
        uses: actions/download-artifact@v5
        with:
          name: build-${{ needs.build.outputs.artifact-suffix }}
          path: out
      - name: Extract build artifacts
        run: tar -xf out/build-artifacts.tar

      - name: Start test services
        run: task test:services:up

      - name: Playwright
        run: task ci:playwright

      - name: Stop test services
        if: always()
        run: task test:services:down

      - name: Upload Playwright report
        if: "!cancelled()"
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report-${{ needs.build.outputs.artifact-suffix }}
          retention-days: "7"
          overwrite: "true"
          if-no-files-found: error
          path: out/playwright/report/html

  lint:
    name: Lint
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Set up pnpm
        uses: pnpm/action-setup@v4

      - name: Set up Node.js
        uses: actions/setup-node@v6
        with:
          cache: pnpm
          node-version-file: .node-version

      - name: Set up Task
        uses: go-task/setup-task@v1

      - name: Download build artifacts
        uses: actions/download-artifact@v5
        with:
          name: build-${{ needs.build.outputs.artifact-suffix }}
          path: out
      - name: Extract build artifacts
        run: tar -xf out/build-artifacts.tar

      - name: ESLint
        run: task ci:eslint

      - name: Typecheck
        run: task ci:typecheck

      - name: Prettier
        run: task ci:prettier
