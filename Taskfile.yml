# yaml-language-server: $schema=https://taskfile.dev/schema.json
version: "3"

vars:
  APP_NAME: nextjs-starter
  GENERATED_FILES: ENVIRONMENT.md
  IMAGE_NAME: ghcr.io/ezzatron/nextjs-starter

includes:
  docker: ./taskfiles/docker
  eslint: ./taskfiles/js/eslint.Taskfile.yml
  js: ./taskfiles/js
  next: ./taskfiles/js/next.Taskfile.yml
  playwright: ./taskfiles/js/playwright.Taskfile.yml
  prettier: ./taskfiles/js/prettier.Taskfile.yml
  storybook: ./taskfiles/js/storybook.Taskfile.yml
  tsc: ./taskfiles/js/tsc.Taskfile.yml
  vitest: ./taskfiles/js/vitest.Taskfile.yml

tasks:
  install-deps:
    desc: Install dependencies
    aliases: [install, i, deps]
    vars:
      ACTUAL_VERSION:
        sh: node --version
      EXPECTED_VERSION:
        sh: cat .node-version
    preconditions:
      - sh: test "{{.ACTUAL_VERSION}}" = "v{{.EXPECTED_VERSION}}"
        msg: Expected Node.js version v{{.EXPECTED_VERSION}}, but got {{.ACTUAL_VERSION}}
    cmds:
      - task: js:install-deps

  run:dev:
    desc: Run the app in development mode
    aliases: [run, dev]
    cmds:
      - task: next:dev

  run:prod:
    desc: Run the app in production mode
    aliases: [start, prod]
    deps: [build]
    cmd: node out/dist/run.mjs

  run:container:
    desc: Run the app in a container
    deps: [image]
    cmds:
      - "docker run --rm -it -p 8000:8000 {{.IMAGE_NAME}}:{{.IMAGE_TAG}}"

  test:
    desc: Run all test suites
    aliases: [t, default]
    cmds:
      - task: vitest:test
      - task: build # This stops Playwright from timing out during server start
      - task: playwright:test

  coverage:
    desc: Run tests with coverage
    cmds:
      - task: vitest:coverage

  coverage:open:
    desc: Open the coverage report
    cmds:
      - task: vitest:coverage:open

  lint:
    desc: Run formatting, linting, and type checking
    cmds:
      - task: prettier:write
      - task: eslint:check
      - task: tsc:typecheck

  storybook:
    desc: Run Storybook in development mode
    cmds:
      - task: storybook:dev

  docs:environment:
    desc: Generate environment variable usage documentation
    deps: [js:install-deps]
    sources:
      - src/env.ts
      - src/run.ts
      - package.json
    generates:
      - ENVIRONMENT.md
    env:
      AUSTENITE_MODE: usage/markdown
      AUSTENITE_APP: "{{.APP_NAME}}"
    cmd: node src/run.ts > ENVIRONMENT.md

  regenerate:
    desc: Regenerate all generated files
    cmds:
      - task: clean:generated
      - task: docs:environment

  regenerate:check:
    internal: true
    desc: Check if all generated files are up to date
    deps: [regenerate]
    preconditions:
      - sh: "git diff --exit-code -- {{.GENERATED_FILES}}"
        msg: Generated files are out of date
    cmd: echo All generated files are up to date

  build:
    desc: Build the app for production
    deps: [next:build:standalone]
    sources:
      - out/next/standalone/**
    generates:
      - out/dist/**
    cmds:
      - rm -rf out/dist
      - cp -r out/next/standalone out/dist
      - node src/build-run.ts out/dist/run.mjs

  image:
    desc: Build the container image
    aliases: [docker]
    deps: [build]
    cmds:
      - task: docker:build

  pre-commit:
    desc: Run all pre-commit checks
    aliases: [pc]
    cmds:
      - task: regenerate:check
      - task: prettier:write
      - task: eslint:no-warnings
      - task: tsc:typecheck
      - task: vitest:test
        vars:
          JS_VITEST_FORBID_ONLY: true
          JS_VITEST_PROJECTS: ["chromium", "firefox", "webkit", "storybook"]
      - task: build # This stops Playwright from timing out during server start
      - task: playwright:test
        vars:
          JS_PLAYWRIGHT_TEST_FORBID_ONLY: true
          JS_PLAYWRIGHT_TEST_PROJECTS: ["chromium", "firefox", "webkit"]
      - task: build
      - task: docker:build

  clean:
    desc: Clean all generated and ignored files
    cmds:
      - task: clean:generated
      - task: clean:ignored

  clean:generated:
    desc: Clean all generated files
    cmd: git restore --source=HEAD --staged --worktree -- {{.GENERATED_FILES}}

  clean:ignored:
    desc: Clean all ignored files
    cmd: git clean -fdx

  ci:regenerate:
    desc: Check generated files for continuous integration
    cmds:
      - task: regenerate:check

  ci:vitest:
    desc: Run Vitest tests for continuous integration
    cmds:
      - task: vitest:test
        vars:
          JS_VITEST_FORBID_ONLY: true
          JS_VITEST_PROJECTS: ["chromium", "firefox", "webkit", "storybook"]

  ci:playwright:
    desc: Run Playwright tests for continuous integration
    cmds:
      - task: playwright:test
        vars:
          JS_PLAYWRIGHT_TEST_FORBID_ONLY: true
          JS_PLAYWRIGHT_TEST_PROJECTS: ["chromium", "firefox", "webkit"]

  ci:eslint:
    desc: Run ESLint for continuous integration
    cmds:
      - task: eslint:no-warnings

  ci:typecheck:
    desc: Run tsc type checking for continuous integration
    cmds:
      - task: tsc:typecheck

  ci:prettier:
    desc: Run Prettier check for continuous integration
    cmds:
      - task: prettier:check
