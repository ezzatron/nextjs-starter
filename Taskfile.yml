# yaml-language-server: $schema=https://taskfile.dev/schema.json
version: "3"

vars:
  APP_NAME: nextjs-starter
  GENERATED_FILES: ENVIRONMENT.md src/api/gen/**
  IMAGE_NAME: ghcr.io/ezzatron/nextjs-starter

includes:
  docker: ./taskfiles/docker
  eslint: ./taskfiles/js/eslint.Taskfile.yml
  js: ./taskfiles/js
  next: ./taskfiles/js/next.Taskfile.yml
  playwright:
    taskfile: ./taskfiles/js/playwright.Taskfile.yml
    vars:
      JS_PW_TEST_DEPS: [build]
  prettier: ./taskfiles/js/prettier.Taskfile.yml
  storybook: ./taskfiles/js/storybook.Taskfile.yml
  tsc: ./taskfiles/js/tsc.Taskfile.yml
  vitest: ./taskfiles/js/vitest.Taskfile.yml

tasks:
  install-deps:
    desc: Install dependencies
    aliases: [install, i, deps]
    cmds:
      - task: js:install-deps

  run:dev:
    desc: Run the app in development mode
    aliases: [run, dev]
    cmds:
      - task: next:dev

  run:prod:
    desc: Run the app in production mode
    aliases: [start, prod]
    deps: [build]
    dotenv: [env/run.local.env, env/run.env]
    cmd: node out/dist/server.js

  run:container:
    desc: Run the app in a container
    deps: [image]
    vars:
      HAS_LOCAL_ENV:
        sh: test -f env/run.container.local.env && echo "true" || echo ""
    cmd: >-
      docker run
      --add-host=host.docker.internal:host-gateway
      --rm
      --interactive
      --tty
      --publish=3000:3000
      --env-file=env/run.container.env
      {{if .HAS_LOCAL_ENV}}--env-file=env/run.container.local.env{{end}}
      {{.IMAGE_NAME}}:{{.IMAGE_TAG}}

  test:services:up:
    desc: Start the test services
    aliases: [test:services]
    cmds:
      - docker compose --file=test/api/docker-compose.yml up --wait
      - docker compose --file=test/playwright/server/docker-compose.yml up --wait

  test:services:down:
    desc: Stop the test services
    cmds:
      - docker compose --file=test/api/docker-compose.yml down
      - docker compose --file=test/playwright/server/docker-compose.yml down

  test:services:build:
    desc: Build the test services
    cmds:
      - docker compose --file=test/api/docker-compose.yml build
      - docker compose --file=test/playwright/server/docker-compose.yml build

  test:
    desc: Run all test suites
    aliases: [t, default]
    cmds:
      - task: vitest:test
      - task: build
      - task: playwright:test

  coverage:
    desc: Run tests with coverage
    cmds:
      - task: vitest:coverage

  coverage:open:
    desc: Open the coverage report
    cmds:
      - task: vitest:coverage:open

  lint:
    desc: Run formatting, linting, and type checking
    cmds:
      - task: prettier:write
      - task: eslint:check
      - task: tsc:typecheck

  storybook:
    desc: Run Storybook in development mode
    cmds:
      - task: storybook:dev

  docs:environment:
    desc: Generate environment variable usage documentation
    deps: [js:install-deps]
    sources:
      - src/env.ts
      - package.json
    generates:
      - ENVIRONMENT.md
    env:
      AUSTENITE_MODE: usage/markdown
      AUSTENITE_APP: "{{.APP_NAME}}"
    cmd: node src/env.ts > ENVIRONMENT.md

  regenerate:
    desc: Regenerate all generated files
    cmds:
      - task: clean:generated
      - task: proto
      - task: docs:environment

  regenerate:check:
    internal: true
    desc: Check if all generated files are up to date
    deps: [regenerate]
    preconditions:
      - sh: git diff --exit-code -- {{.GENERATED_FILES}}
        msg: Generated files are out of date
    cmd: echo All generated files are up to date

  proto:
    desc: Compile .proto files
    deps: [js:install-deps]
    sources:
      - src/api/**/*.proto
    generates:
      - src/api/gen/**
    cmds:
      - mkdir -p src/api/gen/pet-store
      - >-
        {{.JS_EXEC}} grpc_tools_node_protoc
        --plugin=protoc-gen-ts_proto=./node_modules/.bin/protoc-gen-ts_proto
        --proto_path=src/api
        --descriptor_set_out=src/api/gen/pet-store/v1.pb
        --ts_proto_out=src/api/gen
        --ts_proto_opt="outputServices=nice-grpc,outputServices=generic-definitions,useExactTypes=false"
        src/api/pet-store/v1.proto

  build:
    desc: Build the app for production
    deps: [proto, next:build:standalone]
    sources:
      - out/next/standalone/**
    generates:
      - out/dist/**
    cmds:
      - rm -rf out/dist
      - cp -r out/next/standalone out/dist

  image:
    desc: Build the container image
    aliases: [docker]
    deps: [build]
    cmds:
      - task: docker:build

  pre-commit:
    desc: Run all pre-commit checks
    aliases: [pc]
    cmds:
      - task: regenerate:check
      - task: prettier:write
      - task: eslint:no-warnings
      - task: tsc:typecheck
      - task: vitest:test
        vars:
          JS_VITEST_FORBID_ONLY: true
          JS_VITEST_PROJECTS:
            - chromium
            - firefox
            - server
            - storybook
            - webkit
      - task: build
      - task: playwright:test
        vars:
          JS_PW_TEST_FORBID_ONLY: true
          JS_PW_TEST_PROJECTS:
            - chromium
            - firefox
            - webkit
      - task: docker:build

  clean:generated:
    desc: Clean all generated files
    cmd: rm -rf {{.GENERATED_FILES}}

  clean:ignored:
    desc: Clean all ignored files
    aliases: [clean]
    cmd: git clean -fdx

  clean:all:
    desc: Clean all generated and ignored files
    cmds:
      - task: clean:generated
      - task: clean:ignored

  ci:regenerate:
    desc: Check generated files for continuous integration
    cmds:
      - task: regenerate:check

  ci:build:
    desc: Build the app for continuous integration
    cmds:
      - task: build

  ci:vitest:
    desc: Run Vitest tests for continuous integration
    cmds:
      - task: vitest:test
        vars:
          JS_VITEST_COVERAGE: true
          JS_VITEST_FORBID_ONLY: true
          JS_VITEST_PROJECTS:
            - chromium
            - firefox
            - server
            - storybook
            - webkit

  ci:playwright:
    desc: Run Playwright tests for continuous integration
    cmds:
      - task: playwright:test
        vars:
          JS_PW_TEST_FORBID_ONLY: true
          JS_PW_TEST_PROJECTS:
            - chromium
            - firefox
            - webkit

  ci:eslint:
    desc: Run ESLint for continuous integration
    cmds:
      - task: eslint:no-warnings

  ci:typecheck:
    desc: Run tsc type checking for continuous integration
    cmds:
      - task: tsc:typecheck

  ci:prettier:
    desc: Run Prettier check for continuous integration
    cmds:
      - task: prettier:check
