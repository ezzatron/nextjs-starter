// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.8.1
//   protoc               v3.19.1
// source: pet-store/v1.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import type { CallContext, CallOptions } from "nice-grpc-common";

export const protobufPackage = "org.acme.pet_store.v1";

export interface AllPetsRequest {
}

export interface PetSearchRequest {
  name: string;
}

export interface PetNameRequest {
  name: string;
}

export interface PetsResponse {
  pets: Pet[];
}

export interface Pet {
  id: number;
  name: string;
}

function createBaseAllPetsRequest(): AllPetsRequest {
  return {};
}

export const AllPetsRequest: MessageFns<AllPetsRequest> = {
  encode(_: AllPetsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AllPetsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAllPetsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): AllPetsRequest {
    return {};
  },

  toJSON(_: AllPetsRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<AllPetsRequest>): AllPetsRequest {
    return AllPetsRequest.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<AllPetsRequest>): AllPetsRequest {
    const message = createBaseAllPetsRequest();
    return message;
  },
};

function createBasePetSearchRequest(): PetSearchRequest {
  return { name: "" };
}

export const PetSearchRequest: MessageFns<PetSearchRequest> = {
  encode(message: PetSearchRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PetSearchRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePetSearchRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PetSearchRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: PetSearchRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<PetSearchRequest>): PetSearchRequest {
    return PetSearchRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<PetSearchRequest>): PetSearchRequest {
    const message = createBasePetSearchRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBasePetNameRequest(): PetNameRequest {
  return { name: "" };
}

export const PetNameRequest: MessageFns<PetNameRequest> = {
  encode(message: PetNameRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PetNameRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePetNameRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PetNameRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: PetNameRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<PetNameRequest>): PetNameRequest {
    return PetNameRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<PetNameRequest>): PetNameRequest {
    const message = createBasePetNameRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBasePetsResponse(): PetsResponse {
  return { pets: [] };
}

export const PetsResponse: MessageFns<PetsResponse> = {
  encode(message: PetsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.pets) {
      Pet.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PetsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePetsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.pets.push(Pet.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PetsResponse {
    return { pets: globalThis.Array.isArray(object?.pets) ? object.pets.map((e: any) => Pet.fromJSON(e)) : [] };
  },

  toJSON(message: PetsResponse): unknown {
    const obj: any = {};
    if (message.pets?.length) {
      obj.pets = message.pets.map((e) => Pet.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<PetsResponse>): PetsResponse {
    return PetsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<PetsResponse>): PetsResponse {
    const message = createBasePetsResponse();
    message.pets = object.pets?.map((e) => Pet.fromPartial(e)) || [];
    return message;
  },
};

function createBasePet(): Pet {
  return { id: 0, name: "" };
}

export const Pet: MessageFns<Pet> = {
  encode(message: Pet, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Pet {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePet();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Pet {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      name: isSet(object.name) ? globalThis.String(object.name) : "",
    };
  },

  toJSON(message: Pet): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<Pet>): Pet {
    return Pet.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Pet>): Pet {
    const message = createBasePet();
    message.id = object.id ?? 0;
    message.name = object.name ?? "";
    return message;
  },
};

export type PetStoreDefinition = typeof PetStoreDefinition;
export const PetStoreDefinition = {
  name: "PetStore",
  fullName: "org.acme.pet_store.v1.PetStore",
  methods: {
    getPets: {
      name: "GetPets",
      requestType: AllPetsRequest,
      requestStream: false,
      responseType: PetsResponse,
      responseStream: false,
      options: {},
    },
    searchPets: {
      name: "SearchPets",
      requestType: PetSearchRequest,
      requestStream: false,
      responseType: PetsResponse,
      responseStream: false,
      options: {},
    },
    createPet: {
      name: "CreatePet",
      requestType: PetNameRequest,
      requestStream: false,
      responseType: Pet,
      responseStream: false,
      options: {},
    },
  },
} as const;

export interface PetStoreServiceImplementation<CallContextExt = {}> {
  getPets(request: AllPetsRequest, context: CallContext & CallContextExt): Promise<DeepPartial<PetsResponse>>;
  searchPets(request: PetSearchRequest, context: CallContext & CallContextExt): Promise<DeepPartial<PetsResponse>>;
  createPet(request: PetNameRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Pet>>;
}

export interface PetStoreClient<CallOptionsExt = {}> {
  getPets(request: DeepPartial<AllPetsRequest>, options?: CallOptions & CallOptionsExt): Promise<PetsResponse>;
  searchPets(request: DeepPartial<PetSearchRequest>, options?: CallOptions & CallOptionsExt): Promise<PetsResponse>;
  createPet(request: DeepPartial<PetNameRequest>, options?: CallOptions & CallOptionsExt): Promise<Pet>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
